# Generated by Django 3.2.7 on 2022-10-28 16:18

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import proofchecker.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=False)),
                ('is_instructor', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('term', models.CharField(max_length=255)),
                ('section', models.PositiveSmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('email', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=120)),
                ('details', models.TextField(max_length=700)),
                ('attach', models.FileField(blank=True, null=True, upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='Proof',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='New Proof', max_length=255, null=True)),
                ('rules', models.CharField(choices=[('tfl_basic', 'TFL - Basic Rules Only'), ('tfl_derived', 'TFL - Basic & Derived Rules'), ('fol_basic', 'FOL - Basic Rules Only'), ('fol_derived', 'FOL - Basic & Derived Rules')], default='tfl_basic', max_length=255)),
                ('premises', models.CharField(blank=True, max_length=255, null=True)),
                ('conclusion', models.CharField(max_length=255)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='proofchecker.user')),
                ('image', models.ImageField(blank=True, default='profile_pics/default.png', null=True, upload_to='profile_pics')),
                ('mobile', models.CharField(default='xxxxxxxxxx', max_length=10, null=True)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('dob', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='proofchecker.user')),
                ('image', models.ImageField(blank=True, default='profile_pics/default.png', null=True, upload_to='profile_pics')),
                ('mobile', models.CharField(default='xxxxxxxxxx', max_length=10, null=True)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('dob', models.DateField(blank=True, null=True)),
            ],
            options={
                'ordering': ['user__username'],
            },
        ),
        migrations.CreateModel(
            name='ProofLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_no', models.CharField(max_length=100, validators=[proofchecker.models.validate_line_no])),
                ('formula', models.CharField(blank=True, max_length=255, null=True)),
                ('rule', models.CharField(blank=True, max_length=255, null=True)),
                ('ORDER', models.IntegerField(null=True)),
                ('proof', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proofchecker.proof')),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(default='Solve the following problem', max_length=255)),
                ('point', models.DecimalField(decimal_places=2, max_digits=5)),
                ('target_steps', models.PositiveIntegerField()),
                ('lost_points', models.PositiveIntegerField()),
                ('proof', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='proofchecker.proof')),
            ],
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('due_by', models.DateTimeField()),
                ('is_submitted', models.BooleanField(default=False)),
                ('is_late_submitted', models.BooleanField(default=False)),
                ('is_late_submitted_date', models.DateTimeField(blank=True, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proofchecker.course')),
                ('problems', models.ManyToManyField(to='proofchecker.Problem')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='proofchecker.instructor')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='instructor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='proofchecker.instructor'),
        ),
        migrations.AddField(
            model_name='course',
            name='students',
            field=models.ManyToManyField(to='proofchecker.Student'),
        ),
        migrations.CreateModel(
            name='StudentProblemSolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('grade', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proofchecker.assignment')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proofchecker.problem')),
                ('proof', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='proofchecker.proof')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proofchecker.student')),
            ],
            options={
                'unique_together': {('student', 'assignment', 'problem', 'proof')},
            },
        ),
    ]
